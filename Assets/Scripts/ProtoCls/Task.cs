// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Hank.Data {

  /// <summary>Holder for reflection information generated from Task.proto</summary>
  public static partial class TaskReflection {

    #region Descriptor
    /// <summary>File descriptor for Task.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TaskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpUYXNrLnByb3RvEglIYW5rLkRhdGEiJwoGUmV3YXJkEg4KBkl0ZW1JRBgB",
            "IAEoDRINCgVWYWx1ZRgCIAEoAiIqCgtSZXF1aXJlbWVudBIMCgRUeXBlGAEg",
            "ASgNEg0KBVZhbHVlGAIgASgCIqACCgtUYXNrU2V0dGluZxIOCgZUYXNrSWQY",
            "ASABKA0SEQoJUXVlc3RUeXBlGAIgASgNEhIKCkRpZmZpY3VsdHkYAyABKA0S",
            "EAoISXNSZXBlYXQYBCABKA0SEgoKQ2FuRGlzcGxheRgFIAEoDRISCgpJc1Zh",
            "bGlkaXR5GAYgASgNEhMKC0Rlc2NyaXB0aW9uGAcgASgJEiIKB1Jld2FyZHMY",
            "CCADKAsyES5IYW5rLkRhdGEuUmV3YXJkEjIKEkNvbW1pdFJlcXVpcmVtZW50",
            "cxgJIAMoCzIWLkhhbmsuRGF0YS5SZXF1aXJlbWVudBIzChNSZWNpZXZlUmVx",
            "dWlyZW1lbnRzGAogAygLMhYuSGFuay5EYXRhLlJlcXVpcmVtZW50IkIKElRh",
            "c2tTZXR0aW5nU3RvcmFnZRIsCgxUYXNrc2V0dGluZ3MYASADKAsyFi5IYW5r",
            "LkRhdGEuVGFza1NldHRpbmdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Hank.Data.Reward), global::Hank.Data.Reward.Parser, new[]{ "ItemID", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Hank.Data.Requirement), global::Hank.Data.Requirement.Parser, new[]{ "Type", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Hank.Data.TaskSetting), global::Hank.Data.TaskSetting.Parser, new[]{ "TaskId", "QuestType", "Difficulty", "IsRepeat", "CanDisplay", "IsValidity", "Description", "Rewards", "CommitRequirements", "RecieveRequirements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Hank.Data.TaskSettingStorage), global::Hank.Data.TaskSettingStorage.Parser, new[]{ "Tasksettings" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Reward : pb::IMessage<Reward> {
    private static readonly pb::MessageParser<Reward> _parser = new pb::MessageParser<Reward>(() => new Reward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Hank.Data.TaskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reward(Reward other) : this() {
      itemID_ = other.itemID_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reward Clone() {
      return new Reward(this);
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private uint itemID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (Value != 0F) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemID);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemID);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reward other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemID = input.ReadUInt32();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Requirement : pb::IMessage<Requirement> {
    private static readonly pb::MessageParser<Requirement> _parser = new pb::MessageParser<Requirement>(() => new Requirement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Requirement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Hank.Data.TaskReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Requirement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Requirement(Requirement other) : this() {
      type_ = other.type_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Requirement Clone() {
      return new Requirement(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Requirement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Requirement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0F) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Requirement other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskSetting : pb::IMessage<TaskSetting> {
    private static readonly pb::MessageParser<TaskSetting> _parser = new pb::MessageParser<TaskSetting>(() => new TaskSetting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Hank.Data.TaskReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskSetting(TaskSetting other) : this() {
      taskId_ = other.taskId_;
      questType_ = other.questType_;
      difficulty_ = other.difficulty_;
      isRepeat_ = other.isRepeat_;
      canDisplay_ = other.canDisplay_;
      isValidity_ = other.isValidity_;
      description_ = other.description_;
      rewards_ = other.rewards_.Clone();
      commitRequirements_ = other.commitRequirements_.Clone();
      recieveRequirements_ = other.recieveRequirements_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskSetting Clone() {
      return new TaskSetting(this);
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "QuestType" field.</summary>
    public const int QuestTypeFieldNumber = 2;
    private uint questType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QuestType {
      get { return questType_; }
      set {
        questType_ = value;
      }
    }

    /// <summary>Field number for the "Difficulty" field.</summary>
    public const int DifficultyFieldNumber = 3;
    private uint difficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Difficulty {
      get { return difficulty_; }
      set {
        difficulty_ = value;
      }
    }

    /// <summary>Field number for the "IsRepeat" field.</summary>
    public const int IsRepeatFieldNumber = 4;
    private uint isRepeat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsRepeat {
      get { return isRepeat_; }
      set {
        isRepeat_ = value;
      }
    }

    /// <summary>Field number for the "CanDisplay" field.</summary>
    public const int CanDisplayFieldNumber = 5;
    private uint canDisplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CanDisplay {
      get { return canDisplay_; }
      set {
        canDisplay_ = value;
      }
    }

    /// <summary>Field number for the "IsValidity" field.</summary>
    public const int IsValidityFieldNumber = 6;
    private uint isValidity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsValidity {
      get { return isValidity_; }
      set {
        isValidity_ = value;
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 7;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Rewards" field.</summary>
    public const int RewardsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Hank.Data.Reward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(66, global::Hank.Data.Reward.Parser);
    private readonly pbc::RepeatedField<global::Hank.Data.Reward> rewards_ = new pbc::RepeatedField<global::Hank.Data.Reward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Hank.Data.Reward> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "CommitRequirements" field.</summary>
    public const int CommitRequirementsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Hank.Data.Requirement> _repeated_commitRequirements_codec
        = pb::FieldCodec.ForMessage(74, global::Hank.Data.Requirement.Parser);
    private readonly pbc::RepeatedField<global::Hank.Data.Requirement> commitRequirements_ = new pbc::RepeatedField<global::Hank.Data.Requirement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Hank.Data.Requirement> CommitRequirements {
      get { return commitRequirements_; }
    }

    /// <summary>Field number for the "RecieveRequirements" field.</summary>
    public const int RecieveRequirementsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Hank.Data.Requirement> _repeated_recieveRequirements_codec
        = pb::FieldCodec.ForMessage(82, global::Hank.Data.Requirement.Parser);
    private readonly pbc::RepeatedField<global::Hank.Data.Requirement> recieveRequirements_ = new pbc::RepeatedField<global::Hank.Data.Requirement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Hank.Data.Requirement> RecieveRequirements {
      get { return recieveRequirements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (QuestType != other.QuestType) return false;
      if (Difficulty != other.Difficulty) return false;
      if (IsRepeat != other.IsRepeat) return false;
      if (CanDisplay != other.CanDisplay) return false;
      if (IsValidity != other.IsValidity) return false;
      if (Description != other.Description) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      if(!commitRequirements_.Equals(other.commitRequirements_)) return false;
      if(!recieveRequirements_.Equals(other.recieveRequirements_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (QuestType != 0) hash ^= QuestType.GetHashCode();
      if (Difficulty != 0) hash ^= Difficulty.GetHashCode();
      if (IsRepeat != 0) hash ^= IsRepeat.GetHashCode();
      if (CanDisplay != 0) hash ^= CanDisplay.GetHashCode();
      if (IsValidity != 0) hash ^= IsValidity.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= rewards_.GetHashCode();
      hash ^= commitRequirements_.GetHashCode();
      hash ^= recieveRequirements_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (QuestType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(QuestType);
      }
      if (Difficulty != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Difficulty);
      }
      if (IsRepeat != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(IsRepeat);
      }
      if (CanDisplay != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CanDisplay);
      }
      if (IsValidity != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(IsValidity);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Description);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      commitRequirements_.WriteTo(output, _repeated_commitRequirements_codec);
      recieveRequirements_.WriteTo(output, _repeated_recieveRequirements_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (QuestType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QuestType);
      }
      if (Difficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Difficulty);
      }
      if (IsRepeat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsRepeat);
      }
      if (CanDisplay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CanDisplay);
      }
      if (IsValidity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsValidity);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      size += commitRequirements_.CalculateSize(_repeated_commitRequirements_codec);
      size += recieveRequirements_.CalculateSize(_repeated_recieveRequirements_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskSetting other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.QuestType != 0) {
        QuestType = other.QuestType;
      }
      if (other.Difficulty != 0) {
        Difficulty = other.Difficulty;
      }
      if (other.IsRepeat != 0) {
        IsRepeat = other.IsRepeat;
      }
      if (other.CanDisplay != 0) {
        CanDisplay = other.CanDisplay;
      }
      if (other.IsValidity != 0) {
        IsValidity = other.IsValidity;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      rewards_.Add(other.rewards_);
      commitRequirements_.Add(other.commitRequirements_);
      recieveRequirements_.Add(other.recieveRequirements_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            QuestType = input.ReadUInt32();
            break;
          }
          case 24: {
            Difficulty = input.ReadUInt32();
            break;
          }
          case 32: {
            IsRepeat = input.ReadUInt32();
            break;
          }
          case 40: {
            CanDisplay = input.ReadUInt32();
            break;
          }
          case 48: {
            IsValidity = input.ReadUInt32();
            break;
          }
          case 58: {
            Description = input.ReadString();
            break;
          }
          case 66: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 74: {
            commitRequirements_.AddEntriesFrom(input, _repeated_commitRequirements_codec);
            break;
          }
          case 82: {
            recieveRequirements_.AddEntriesFrom(input, _repeated_recieveRequirements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskSettingStorage : pb::IMessage<TaskSettingStorage> {
    private static readonly pb::MessageParser<TaskSettingStorage> _parser = new pb::MessageParser<TaskSettingStorage>(() => new TaskSettingStorage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskSettingStorage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Hank.Data.TaskReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskSettingStorage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskSettingStorage(TaskSettingStorage other) : this() {
      tasksettings_ = other.tasksettings_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskSettingStorage Clone() {
      return new TaskSettingStorage(this);
    }

    /// <summary>Field number for the "Tasksettings" field.</summary>
    public const int TasksettingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Hank.Data.TaskSetting> _repeated_tasksettings_codec
        = pb::FieldCodec.ForMessage(10, global::Hank.Data.TaskSetting.Parser);
    private readonly pbc::RepeatedField<global::Hank.Data.TaskSetting> tasksettings_ = new pbc::RepeatedField<global::Hank.Data.TaskSetting>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Hank.Data.TaskSetting> Tasksettings {
      get { return tasksettings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskSettingStorage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskSettingStorage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tasksettings_.Equals(other.tasksettings_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tasksettings_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tasksettings_.WriteTo(output, _repeated_tasksettings_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tasksettings_.CalculateSize(_repeated_tasksettings_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskSettingStorage other) {
      if (other == null) {
        return;
      }
      tasksettings_.Add(other.tasksettings_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tasksettings_.AddEntriesFrom(input, _repeated_tasksettings_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
